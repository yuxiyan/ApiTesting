{"name": "test_addOrUpCurBact[case_data0]", "status": "broken", "statusDetails": {"message": "Exception: JSON格式校验，关键字 success 返回结果 True 与期望结果 None 类型不符", "trace": "self = <test_addOrUpCurBact.TestRegister object at 0x0000000004799E10>\ncase_data = {'check': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'callTime': None, 'code': None, 'data...tCode': '280101', 'bactValidate': '2022-02-04', 'batnmb': '20110101', 'bizType': 1, ...}}, 'summary': 'addOrUpCurBact'}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"test_addOrUpCurBact\")\n    def test_addOrUpCurBact(self, case_data):\n        # 初始化请求：执行前置接口+替换关联变量\n        test_info, case_data = init_premise(case_dict[\"test_info\"], case_data, case_path)\n        # 发送当前接口\n        code, data = send_request(test_info, case_data)\n        # 校验接口返回\n>       check_result(case_data, code, data)\n\nPyDemo\\testcase\\register\\test_addOrUpCurBact.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncomm\\unit\\checkResult.py:72: in check_result\n    check_json(expected_result, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'callTime': None, 'code': None, 'data': None, 'msg': '返回成功', ...}\ndst_data = {'callTime': None, 'code': 1, 'data': None, 'msg': '已有该批次的疫苗，请直接修改库存!', ...}\n\n    def check_json(src_data, dst_data):\n        \"\"\"\n        校验的json\n        :param src_data: 检验内容\n        :param dst_data: 接口返回的数据\n        :return:\n        \"\"\"\n        if isinstance(src_data, dict):\n            for key in src_data:\n                if key not in dst_data:\n                    raise Exception(\"JSON格式校验，关键字 %s 不在返回结果 %s 中！\" % (key, dst_data))\n                else:\n                    this_key = key\n                    if isinstance(src_data[this_key], dict) and isinstance(dst_data[this_key], dict):\n                        check_json(src_data[this_key], dst_data[this_key])\n                    elif not isinstance(src_data[this_key], type(dst_data[this_key])):\n                        raise Exception(\"JSON格式校验，关键字 %s 返回结果 %s 与期望结果 %s 类型不符\"\n>                                       % (this_key, src_data[this_key], dst_data[this_key]))\nE                       Exception: JSON格式校验，关键字 success 返回结果 True 与期望结果 None 类型不符\n\ncomm\\unit\\checkResult.py:28: Exception"}, "steps": [{"name": "POST请求接口", "status": "passed", "attachments": [{"name": "请求接口", "source": "da39ce35-693c-4f48-92cd-7795dd783e88-attachment.attach"}, {"name": "请求地址", "source": "e9a38fd0-5f1b-4739-a472-7606737e0911-attachment.attach"}, {"name": "请求头", "source": "d3f438ee-fde7-483c-9a1b-87ce48d23359-attachment.attach"}, {"name": "请求参数", "source": "31d021db-66cf-4b6c-ae71-15a2e9953294-attachment.attach"}], "start": 1612427967004, "stop": 1612427967006}, {"name": "POST请求接口", "status": "passed", "attachments": [{"name": "请求接口", "source": "8a751566-67d8-4a28-943a-a0c8cecc3a9f-attachment.attach"}, {"name": "请求地址", "source": "a6f8bf5f-a42a-4c47-a026-243375a5685d-attachment.attach"}, {"name": "请求头", "source": "f8618d25-7423-4d9f-a777-b1bc37ee3fd5-attachment.attach"}, {"name": "请求参数", "source": "c56c0537-21bd-4b7d-b0d8-6235c48804d2-attachment.attach"}], "start": 1612427968055, "stop": 1612427968057}, {"name": "JSON格式校验结果", "status": "passed", "attachments": [{"name": "实际code", "source": "15a5ed09-71be-4302-8da3-f1a3833890c3-attachment.attach"}, {"name": "期望code", "source": "eb8ba490-0f39-42ba-9a1c-44e5ee2a0636-attachment.attach"}, {"name": "实际data", "source": "aa05cb30-25c4-4485-b7f9-1aa4fd98e692-attachment.attach"}, {"name": "期望data", "source": "5f34e443-5ec3-41cf-9002-dd92ec056d54-attachment.attach"}], "start": 1612427969074, "stop": 1612427969075}], "attachments": [{"name": "log", "source": "b996b821-aa01-4bf4-a300-a3426ab66574-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'summary': 'addOrUpCurBact', 'describe': 'test_addOrUpCurBact', 'parameter': 'addOrUpCurBact_request.json', 'check': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'success': True, 'code': None, 'msg': '返回成功', 'data': None, 'callTime': None}}}"}], "start": 1612427966998, "stop": 1612427969076, "uuid": "7632a432-2edf-4bed-9879-5a6e506f0688", "historyId": "fb868315583aa11e2cd2b0339b92f05a", "testCaseId": "c47b844e0cc323f4955b7105ea349bb7", "fullName": "PyDemo.testcase.register.test_addOrUpCurBact.TestRegister#test_addOrUpCurBact", "labels": [{"name": "story", "value": "test_addOrUpCurBact"}, {"name": "feature", "value": "register"}, {"name": "parentSuite", "value": "PyDemo.testcase.register"}, {"name": "suite", "value": "test_addOrUpCurBact"}, {"name": "subSuite", "value": "TestRegister"}, {"name": "host", "value": "Leo-PC"}, {"name": "thread", "value": "1096-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PyDemo.testcase.register.test_addOrUpCurBact"}]}
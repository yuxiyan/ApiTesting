{
  "uid" : "e5c5230705b9bfbb",
  "name" : "test_addOrUpCurBact[case_data0]",
  "fullName" : "PyDemo.testcase.register.test_addOrUpCurBact.TestRegister#test_addOrUpCurBact",
  "historyId" : "fb868315583aa11e2cd2b0339b92f05a",
  "time" : {
    "start" : 1612427966998,
    "stop" : 1612427969076,
    "duration" : 2078
  },
  "status" : "broken",
  "statusMessage" : "Exception: JSON格式校验，关键字 success 返回结果 True 与期望结果 None 类型不符",
  "statusTrace" : "self = <test_addOrUpCurBact.TestRegister object at 0x0000000004799E10>\ncase_data = {'check': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'callTime': None, 'code': None, 'data...tCode': '280101', 'bactValidate': '2022-02-04', 'batnmb': '20110101', 'bizType': 1, ...}}, 'summary': 'addOrUpCurBact'}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"test_addOrUpCurBact\")\n    def test_addOrUpCurBact(self, case_data):\n        # 初始化请求：执行前置接口+替换关联变量\n        test_info, case_data = init_premise(case_dict[\"test_info\"], case_data, case_path)\n        # 发送当前接口\n        code, data = send_request(test_info, case_data)\n        # 校验接口返回\n>       check_result(case_data, code, data)\n\nPyDemo\\testcase\\register\\test_addOrUpCurBact.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncomm\\unit\\checkResult.py:72: in check_result\n    check_json(expected_result, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'callTime': None, 'code': None, 'data': None, 'msg': '返回成功', ...}\ndst_data = {'callTime': None, 'code': 1, 'data': None, 'msg': '已有该批次的疫苗，请直接修改库存!', ...}\n\n    def check_json(src_data, dst_data):\n        \"\"\"\n        校验的json\n        :param src_data: 检验内容\n        :param dst_data: 接口返回的数据\n        :return:\n        \"\"\"\n        if isinstance(src_data, dict):\n            for key in src_data:\n                if key not in dst_data:\n                    raise Exception(\"JSON格式校验，关键字 %s 不在返回结果 %s 中！\" % (key, dst_data))\n                else:\n                    this_key = key\n                    if isinstance(src_data[this_key], dict) and isinstance(dst_data[this_key], dict):\n                        check_json(src_data[this_key], dst_data[this_key])\n                    elif not isinstance(src_data[this_key], type(dst_data[this_key])):\n                        raise Exception(\"JSON格式校验，关键字 %s 返回结果 %s 与期望结果 %s 类型不符\"\n>                                       % (this_key, src_data[this_key], dst_data[this_key]))\nE                       Exception: JSON格式校验，关键字 success 返回结果 True 与期望结果 None 类型不符\n\ncomm\\unit\\checkResult.py:28: Exception",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "Exception: JSON格式校验，关键字 success 返回结果 True 与期望结果 None 类型不符",
    "statusTrace" : "self = <test_addOrUpCurBact.TestRegister object at 0x0000000004799E10>\ncase_data = {'check': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'callTime': None, 'code': None, 'data...tCode': '280101', 'bactValidate': '2022-02-04', 'batnmb': '20110101', 'bizType': 1, ...}}, 'summary': 'addOrUpCurBact'}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"])\n    @allure.story(\"test_addOrUpCurBact\")\n    def test_addOrUpCurBact(self, case_data):\n        # 初始化请求：执行前置接口+替换关联变量\n        test_info, case_data = init_premise(case_dict[\"test_info\"], case_data, case_path)\n        # 发送当前接口\n        code, data = send_request(test_info, case_data)\n        # 校验接口返回\n>       check_result(case_data, code, data)\n\nPyDemo\\testcase\\register\\test_addOrUpCurBact.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncomm\\unit\\checkResult.py:72: in check_result\n    check_json(expected_result, data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc_data = {'callTime': None, 'code': None, 'data': None, 'msg': '返回成功', ...}\ndst_data = {'callTime': None, 'code': 1, 'data': None, 'msg': '已有该批次的疫苗，请直接修改库存!', ...}\n\n    def check_json(src_data, dst_data):\n        \"\"\"\n        校验的json\n        :param src_data: 检验内容\n        :param dst_data: 接口返回的数据\n        :return:\n        \"\"\"\n        if isinstance(src_data, dict):\n            for key in src_data:\n                if key not in dst_data:\n                    raise Exception(\"JSON格式校验，关键字 %s 不在返回结果 %s 中！\" % (key, dst_data))\n                else:\n                    this_key = key\n                    if isinstance(src_data[this_key], dict) and isinstance(dst_data[this_key], dict):\n                        check_json(src_data[this_key], dst_data[this_key])\n                    elif not isinstance(src_data[this_key], type(dst_data[this_key])):\n                        raise Exception(\"JSON格式校验，关键字 %s 返回结果 %s 与期望结果 %s 类型不符\"\n>                                       % (this_key, src_data[this_key], dst_data[this_key]))\nE                       Exception: JSON格式校验，关键字 success 返回结果 True 与期望结果 None 类型不符\n\ncomm\\unit\\checkResult.py:28: Exception",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1612427967004,
        "stop" : 1612427967006,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "3f3d3b675f8b38f0",
        "name" : "请求接口",
        "source" : "3f3d3b675f8b38f0.attach",
        "type" : "text/plain",
        "size" : 19
      }, {
        "uid" : "4ac290f03a0b29ab",
        "name" : "请求地址",
        "source" : "4ac290f03a0b29ab.attach",
        "type" : "text/plain",
        "size" : 58
      }, {
        "uid" : "45bb27deeb34ae52",
        "name" : "请求头",
        "source" : "45bb27deeb34ae52.attach",
        "type" : "text/plain",
        "size" : 67
      }, {
        "uid" : "bdc87a179c292ab3",
        "name" : "请求参数",
        "source" : "bdc87a179c292ab3.attach",
        "type" : "text/plain",
        "size" : 149
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    }, {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1612427968055,
        "stop" : 1612427968057,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "64929705a353786a",
        "name" : "请求接口",
        "source" : "64929705a353786a.attach",
        "type" : "text/plain",
        "size" : 14
      }, {
        "uid" : "47e7333bf43a045",
        "name" : "请求地址",
        "source" : "47e7333bf43a045.attach",
        "type" : "text/plain",
        "size" : 53
      }, {
        "uid" : "d8d657fe62f789ca",
        "name" : "请求头",
        "source" : "d8d657fe62f789ca.attach",
        "type" : "text/plain",
        "size" : 67
      }, {
        "uid" : "e100c861d9156d57",
        "name" : "请求参数",
        "source" : "e100c861d9156d57.attach",
        "type" : "text/plain",
        "size" : 7063
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    }, {
      "name" : "JSON格式校验结果",
      "time" : {
        "start" : 1612427969074,
        "stop" : 1612427969075,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e645f31e66475871",
        "name" : "实际code",
        "source" : "e645f31e66475871.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "e5cdc98bcb63fce1",
        "name" : "期望code",
        "source" : "e5cdc98bcb63fce1.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "7a7457e66b250a1f",
        "name" : "实际data",
        "source" : "7a7457e66b250a1f.attach",
        "type" : "text/plain",
        "size" : 120
      }, {
        "uid" : "9c97dfe6f36b3570",
        "name" : "期望data",
        "source" : "9c97dfe6f36b3570.attach",
        "type" : "text/plain",
        "size" : 86
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "3ce195f221668870",
      "name" : "log",
      "source" : "3ce195f221668870.txt",
      "type" : "text/plain",
      "size" : 25525
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "attachmentsCount" : 13,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "test_addOrUpCurBact"
  }, {
    "name" : "feature",
    "value" : "register"
  }, {
    "name" : "parentSuite",
    "value" : "PyDemo.testcase.register"
  }, {
    "name" : "suite",
    "value" : "test_addOrUpCurBact"
  }, {
    "name" : "subSuite",
    "value" : "TestRegister"
  }, {
    "name" : "host",
    "value" : "Leo-PC"
  }, {
    "name" : "thread",
    "value" : "1096-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "PyDemo.testcase.register.test_addOrUpCurBact"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'summary': 'addOrUpCurBact', 'describe': 'test_addOrUpCurBact', 'parameter': 'addOrUpCurBact_request.json', 'check': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'success': True, 'code': None, 'msg': '返回成功', 'data': None, 'callTime': None}}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e5c5230705b9bfbb.json",
  "parameterValues" : [ "{'summary': 'addOrUpCurBact', 'describe': 'test_addOrUpCurBact', 'parameter': 'addOrUpCurBact_request.json', 'check': {'check_type': 'check_json', 'expected_code': 200, 'expected_result': {'success': True, 'code': None, 'msg': '返回成功', 'data': None, 'callTime': None}}}" ]
}